{"name": "Test_01", "status": "failed", "statusDetails": {"message": "AssertionError: Test 'Test_01' failed.\n  Task: 'Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats'\n  Expected substring: ' success'\n  Actual final result: 'Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.'\nassert ' success' in \"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\"\n +  where \"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\" = str(\"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\")", "trace": "test_name = 'Test_01'\ntest_task = \"Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats\"\nexpected_substring = ' success'\ngemini_llm = ChatGoogle(model='gemini-2.0-flash-exp', temperature=None, thinking_budget=None, config=None, api_key=None, vertexai=None, credentials=None, project=None, location=None, http_options=None)\n\n    @pytest.mark.asyncio  # Indicates that this test function is an async coroutine\n    @allure.feature(\"Browser Automation Agent\")  # Adds a Feature to the report\n    @allure.story(\"Execute Task from CSV\")      # Adds a Story to the report\n    @pytest.mark.parametrize(\n        \"test_name, test_task, expected_substring\",\n        test_cases,\n        # Use the 'test_name' from the CSV as the ID for Pytest/Allure reporting\n        ids=[case[0] for case in test_cases]\n    )\n    async def test_browser_task_from_csv(test_name: str, test_task: str, expected_substring: str, gemini_llm):\n        \"\"\"\n        Runs browser tasks defined in the CSV file and asserts the expected substring\n        is present in the final result.\n        \"\"\"\n        # Use the test_name from CSV as the title in the Allure report\n        allure.dynamic.title(test_name)\n        # Add parameters explicitly (parametrize often does this, but explicit is clearer)\n        allure.dynamic.parameter(\"Task Description\", test_task)\n        allure.dynamic.parameter(\"Expected Substring\", expected_substring)\n    \n        assert gemini_llm is not None  # Should be true unless the fixture caused a skip\n    \n        # Wrap the core execution logic in an Allure step\n        with allure.step(f\"Execute browser task: '{test_task}'\"):\n            final_result = await run_task(test_task, gemini_llm)\n    \n        # Assert that the expected substring is present in the final result\n        # The assertion message is still useful in console output and detailed Allure logs\n>       assert expected_substring in str(final_result), \\\n            f\"Test '{test_name}' failed.\\n\" \\\n            f\"Task: '{test_task}'\\n\" \\\n            f\"Expected substring: '{expected_substring}'\\n\" \\\n            f\"Actual final result: '{final_result}'\"\nE       AssertionError: Test 'Test_01' failed.\nE         Task: 'Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats'\nE         Expected substring: ' success'\nE         Actual final result: 'Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.'\nE       assert ' success' in \"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\"\nE        +  where \"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\" = str(\"Successfully opened Google, searched for 'cats', clicked on the 'Images' tab, and verified that there are multiple images of cats displayed.\")\n\nBrowserUseTests\\test_BrowserUse.py:141: AssertionError"}, "description": "\nRuns browser tasks defined in the CSV file and asserts the expected substring\nis present in the final result.\n", "steps": [{"name": "Execute browser task: 'Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats'", "status": "passed", "start": 1751899844948, "stop": 1751899899791}], "attachments": [{"name": "log", "source": "91a568d4-7f54-4f40-8ec8-18a6208be373-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_name", "value": "'Test_01'"}, {"name": "test_task", "value": "'Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats'"}, {"name": "expected_substring", "value": "' success'"}, {"name": "Task Description", "value": "'Open https://www.google.com. Enter to search bar 'cats' and click on 'search' button. Click on the 'Images' tab. Check that there are more than one image of cats'"}, {"name": "Expected Substring", "value": "' success'"}], "start": 1751899844947, "stop": 1751899899791, "uuid": "84402629-d21f-462b-bc57-6893b3085a0f", "historyId": "17986cde187ab69b9507a9c97c035e6c", "testCaseId": "f6909c3556c8bce65e6c543d33ed04ed", "fullName": "BrowserUseTests.test_BrowserUse#test_browser_task_from_csv", "labels": [{"name": "feature", "value": "Browser Automation Agent"}, {"name": "story", "value": "Execute Task from CSV"}, {"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "BrowserUseTests"}, {"name": "suite", "value": "test_BrowserUse"}, {"name": "host", "value": "GleyberzonPC"}, {"name": "thread", "value": "8708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "BrowserUseTests.test_BrowserUse"}]}